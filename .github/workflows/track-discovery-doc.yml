name: Track Vertex AI in Firebase Discovery Document Changes

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 4 * * *' # Runs daily at 4:00 UTC
  pull_request:

permissions:
  contents: write # Needed to commit changes back to the repo

env:
  DISCOVERY_DOC_URL: "https://firebasevertexai.googleapis.com/$discovery/rest?version=v1beta"
  DISCOVERY_DOC_PATH: "discovery_docs/firebasevertexai-v1beta/discovery.json"
  CHANGELOG_PATH: "discovery_docs/firebasevertexai-v1beta/CHANGELOG.md"
  TEMP_NEW_DOC: "new-discovery.json"
  TEMP_OLD_DOC: "old-discovery-formatted.json" # For formatted comparison
  TEMP_NEW_DOC_FORMATTED: "new-discovery-formatted.json" # For formatted comparison
  DIFF_OUTPUT_PATH: "diff_output.txt"
  GEMINI_API_ENDPOINT: "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

jobs:
  track-and-summarize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history so the date diff script works correctly later
          fetch-depth: 0

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Ensure discovery directory exists
        run: mkdir -p $(dirname "$DISCOVERY_DOC_PATH")

      - name: Download latest Discovery Document
        run: |
          echo "Downloading latest document from $DISCOVERY_DOC_URL"
          curl -s -f -L "$DISCOVERY_DOC_URL" -o "${RUNNER_TEMP}/${TEMP_NEW_DOC}"
          if [ $? -ne 0 ]; then
            echo "::error::Failed to download Discovery Document."
            exit 1
          fi
          echo "Download complete."

      - name: Check if existing document exists
        id: check_existing
        run: |
          if [ -f "$DISCOVERY_DOC_PATH" ]; then
            echo "existing_doc_found=true" >> $GITHUB_OUTPUT
          else
            echo "existing_doc_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Format JSON files for consistent diffing
        run: |
          # Format new doc
          if ! jq '.' "${RUNNER_TEMP}/${TEMP_NEW_DOC}" > "${RUNNER_TEMP}/${TEMP_NEW_DOC_FORMATTED}"; then
             echo "::warning::Downloaded document is not valid JSON. Proceeding with text diff."
             cp "${RUNNER_TEMP}/${TEMP_NEW_DOC}" "${RUNNER_TEMP}/${TEMP_NEW_DOC_FORMATTED}"
          fi

          # Format existing doc if it exists
          if [ "${{ steps.check_existing.outputs.existing_doc_found }}" == "true" ]; then
            if ! jq '.' "$DISCOVERY_DOC_PATH" > "${RUNNER_TEMP}/${TEMP_OLD_DOC}"; then
              echo "::warning::Existing document is not valid JSON. Proceeding with text diff."
              cp "$DISCOVERY_DOC_PATH" "${RUNNER_TEMP}/${TEMP_OLD_DOC}"
            fi
          else
             # Create an empty file to diff against if no existing doc
             touch "${RUNNER_TEMP}/${TEMP_OLD_DOC}"
          fi

      - name: Check for differences
        id: check_diff
        run: |
          if ! diff -q "${RUNNER_TEMP}/${TEMP_OLD_DOC}" "${RUNNER_TEMP}/${TEMP_NEW_DOC_FORMATTED}" > /dev/null; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "Changes detected in the Discovery Document."
            # Generate the diff output for later steps
            diff -u "${RUNNER_TEMP}/${TEMP_OLD_DOC}" "${RUNNER_TEMP}/${TEMP_NEW_DOC_FORMATTED}" > "$DIFF_OUTPUT_PATH" || true # Allow diff to exit with 1 if files differ
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "No changes detected in the Discovery Document."
          fi

      - name: Process changes (if any)
        if: steps.check_diff.outputs.changes_detected == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Processing detected changes..."

          # 1. Overwrite the old file with the new formatted version
          mv "${RUNNER_TEMP}/${TEMP_NEW_DOC_FORMATTED}" "$DISCOVERY_DOC_PATH"
          echo "Updated $DISCOVERY_DOC_PATH"

          # 2. Prepare diff for Gemini (limit size if necessary)
          DIFF_CONTENT=$(head -c 15000 "$DIFF_OUTPUT_PATH") # Limit diff size for API
          if [ $(wc -c < "$DIFF_OUTPUT_PATH") -gt 15000 ]; then
            echo "::warning::Diff content truncated for Gemini summary due to size limits."
            DIFF_CONTENT+=$'\n... (diff truncated)'
          fi

          # Escape diff content for JSON payload
          ESCAPED_DIFF_CONTENT=$(echo "$DIFF_CONTENT" | jq -s -R '.')

          # 3. Generate Summary with Gemini API
          GEMINI_SUMMARY="Could not generate summary (Gemini API key missing or call failed)." # Default message
          if [ -z "$GEMINI_API_KEY" ]; then
             echo "::warning::GEMINI_API_KEY secret not set. Skipping summary generation."
          else
            echo "Generating summary using Gemini API..."
            API_RESPONSE=$(curl -s -X POST "$GEMINI_API_ENDPOINT?key=$GEMINI_API_KEY" \
              -H "Content-Type: application/json" \
              --data @- <<EOF
              {
                "contents": [{
                  "parts": [{
                    "text": "Summarize the key changes from the following diff of a Google API Discovery Document. Focus on added/removed methods or significant parameter changes. Be concise:\n\n\`\`\`diff\n${ESCAPED_DIFF_CONTENT}\n\`\`\`"
                  }]
                }]
              }
          EOF
          )

            # Very basic response parsing - check for candidate text
            # Robust parsing should use jq and handle errors properly
            GENERATED_TEXT=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text // ""')

            if [ -n "$GENERATED_TEXT" ]; then
              GEMINI_SUMMARY="$GENERATED_TEXT"
              echo "Gemini summary generated successfully."
            else
              echo "::error::Failed to generate summary or parse response from Gemini API."
              echo "API Response: $API_RESPONSE" # Log error for debugging
            fi
          fi

          # 4. Update CHANGELOG.md
          echo "Updating $CHANGELOG_PATH..."
          CHANGELOG_ENTRY="## $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\n**Summary:**\n${GEMINI_SUMMARY}\n\n**Details (diff):**\n\`\`\`diff\n$(cat $DIFF_OUTPUT_PATH)\n\`\`\`\n\n"

          # Prepend the new entry
          TEMP_CHANGELOG="TEMP_CHANGELOG.md"
          echo -e "$CHANGELOG_ENTRY" > "$TEMP_CHANGELOG" # Use -e to interpret escapes like \n
          if [ -f "$CHANGELOG_PATH" ]; then
            cat "$CHANGELOG_PATH" >> "$TEMP_CHANGELOG"
          fi
          mv "$TEMP_CHANGELOG" "$CHANGELOG_PATH"
          echo "$CHANGELOG_PATH updated."

          # 5. Commit and push changes
          echo "Committing and pushing changes..."
          git add "$DISCOVERY_DOC_PATH" "$CHANGELOG_PATH"
          git commit -m "Update Vertex AI Discovery Document $(date -u +'%Y-%m-%d')"
          git push
          echo "Changes pushed successfully."

      - name: Clean up temporary files
        if: always() # Run even if previous steps fail
        run: |
           rm -f "${RUNNER_TEMP}/${TEMP_NEW_DOC}" "${RUNNER_TEMP}/${TEMP_OLD_DOC}" "${RUNNER_TEMP}/${TEMP_NEW_DOC_FORMATTED}" "$DIFF_OUTPUT_PATH" "TEMP_CHANGELOG.md"
           echo "Temporary files cleaned up."
